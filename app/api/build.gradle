import org.javalite.instrumentation.Instrumentation

buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
        classpath group: 'org.javalite', name: 'activejdbc', version: '1.4.10'
        classpath group: 'org.javalite', name: 'activejdbc-instrumentation', version: '1.4.10'
    }
}

// from the Griffon ActiveJDBC plugin
def addUrlIfNotPresent( to, what ) {
  if ( !to || !what ) { return }
  def urls = to.URLs.toList()
  switch( what.class ) {
    case URL: what = new File( what.toURI() ); break
    case String: what = new File( what ); break
    case GString: what = new File( what.toString() ); break
    case File: break; // ok
    default:
      println "Don't know how to deal with $what as it is not an URL nor a File"
      System.exit( 1 )
  }

  if ( what.directory && !what.exists() ) { what.mkdirs() }
  def url = what.toURI().toURL()
  if ( !urls.contains( url ) && ( what.directory || !urls.find{ it.path.endsWith( what.name ) } ) ) {
      to.addURL( url )
  }
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.12'
}

allprojects {
  group = 'jp.mts'
  version = '1.0'
}

subprojects {

  // @see
  // active jdbc instrumentation:
  //   https://github.com/javalite/activejdbc-gradle/blob/master/build.gradle
  //   https://github.com/javalite/activejdbc/tree/master/activejdbc-instrumentation

  apply plugin: 'java'
  apply plugin: 'spring-boot'
  apply plugin: 'eclipse'

  sourceCompatibility = 1.8
  compileTestJava.sourceCompatibility = 1.8
  compileTestJava.targetCompatibility = 1.8

  def defaultEncoding = 'UTF-8'
  tasks.withType(AbstractCompile) each { it.options.encoding = defaultEncoding }

  repositories {
      jcenter()
      maven { url "http://repo.spring.io/snapshot" }
      maven { url "http://repo.spring.io/milestone" }
  }

  configurations {
  	testMock
  }

  dependencies {
  	def jmockitDependency = "org.jmockit:jmockit:1.17";

    testMock jmockitDependency    //実行時にモックを有効にするために先に読み込む必要があるため別で管理
  	testCompile jmockitDependency //eclipse用に設定
  	testCompile "junit:junit:4.11"

    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-jdbc"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-starter-amqp"
    compile "org.springframework.boot:spring-boot-starter-websocket"
    compile "org.springframework.boot:spring-boot-starter-mail"
    testCompile "org.springframework.boot:spring-boot-starter-test"

    compile "org.apache.commons:commons-lang3:3.4"
  	compile "com.h2database:h2:1.4.187"
  	compile "org.javalite:activejdbc:1.4.10"
  	compile 'org.postgresql:postgresql:9.3-1102-jdbc4'
    compile 'javax.mail:javax.mail-api:1.5.4'
    compile 'com.mashape.unirest:unirest-java:1.4.7'

    compile "org.msgpack:msgpack-core:0.7.0-p9"
    compile "org.msgpack:jackson-dataformat-msgpack:0.7.0-p5"
	  compile 'com.google.guava:guava:18.0'
    compile 'io.jsonwebtoken:jjwt:0.6.0'
  }

  sourceSets.test.compileClasspath = configurations.testMock + sourceSets.test.compileClasspath
  sourceSets.test.runtimeClasspath = configurations.testMock + sourceSets.test.runtimeClasspath


  // Instrument models: borowed from the Griffon ActiveJDBC plugin.
  compileJava << {
  	tasks.activeJdbcInstrument.execute()
  }

  task activeJdbcInstrument << {
    Instrumentation instrumentation = new Instrumentation()
    def projectMainClassesDir = sourceSets.main.output.classesDir.getPath()
    def rootLoader = this.class.classLoader.rootLoader
    instrumentation.outputDirectory = projectMainClassesDir
    addUrlIfNotPresent rootLoader, projectMainClassesDir
    addUrlIfNotPresent Instrumentation.class.classLoader, projectMainClassesDir
    instrumentation.instrument()
  }

  eclipse {
    classpath {
      defaultOutputDir = sourceSets.main.output.classesDir
    }
  }
}

project(':libs') {
  mainClassName = "dummy"
}
project(':libs:unit-test') {
  mainClassName = "dummy"
}
project(':libs:event') {
  mainClassName = "dummy"
  dependencies {
    testCompile project(':libs:unit-test')
  }
}
project(':base') {
  mainClassName = "dummy"
  dependencies {
    compile project(':libs:event')
    testCompile project(':libs:unit-test')
  }
}
project(':ut-base') {
  mainClassName = "dummy"
  dependencies {
  	compile "org.jmockit:jmockit:1.17";
  	compile "junit:junit:4.11"
    compile "org.springframework.boot:spring-boot-starter-test"
    compile project(':libs:unit-test')
    compile project(':base')
  }
}
project(':auth-access') {
  springBoot {
    executable = true
  }
  dependencies {
    compile project(':libs:event'), project(':base')
    testCompile project(':libs:unit-test'), project(':ut-base')
    testRuntime files("../../../vm/orchestrate/ansible/roles/auth-access_db_migrate/files/scripts")
  }
}
project(':task-manage') {
  springBoot {
    executable = true
  }
  dependencies {
    compile project(':libs:event'), project(':base')
    testCompile project(':libs:unit-test'), project(':ut-base')
    testRuntime files("../../../vm/orchestrate/ansible/roles/task-manage_db_migrate/files/scripts")
  }
}
project(':widget-store') {
  springBoot {
    executable = true
  }
  dependencies {
    compile project(':libs:event'), project(':base')
    testCompile project(':libs:unit-test'), project(':ut-base')
    testRuntime files("../../../vm/orchestrate/ansible/roles/widget-store_db_migrate/files/scripts")
  }
}
