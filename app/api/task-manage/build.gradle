// @see 
// active jdbc instrumentation:
//   https://github.com/javalite/activejdbc-gradle/blob/master/build.gradle
//   https://github.com/javalite/activejdbc/tree/master/activejdbc-instrumentation

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'eclipse'

import org.javalite.instrumentation.Instrumentation

buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE")
        classpath group: 'org.javalite', name: 'activejdbc', version: '1.4.10'
        classpath group: 'org.javalite', name: 'activejdbc-instrumentation', version: '1.4.10'
    }
}

sourceCompatibility = 1.8
compileTestJava.sourceCompatibility = 1.8
compileTestJava.targetCompatibility = 1.8

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile) each { it.options.encoding = defaultEncoding }

jar {
    baseName = 'auth-access'
    version =  '0.0.1-SNAPSHOT'
}

repositories {
    jcenter()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/milestone" }
}

configurations {
	testMock
}

dependencies {
	def jmockitDependency = "org.jmockit:jmockit:1.17";

    testMock jmockitDependency    //実行時にモックを有効にするために先に読み込む必要があるため別で管理
	testCompile jmockitDependency //eclipse用に設定
	testCompile "junit:junit:4.11"

    compile "org.springframework.boot:spring-boot-starter-web" 
    compile "org.springframework.boot:spring-boot-starter-jdbc" 
    compile "org.springframework.boot:spring-boot-starter-aop" 
    testCompile "org.springframework.boot:spring-boot-starter-test" 

	compile "com.h2database:h2:1.4.187"
	compile "org.javalite:activejdbc:1.4.10"
	compile 'org.postgresql:postgresql:9.3-1102-jdbc4'	
	
	compile 'com.google.guava:guava:18.0'
	 
}

sourceSets.test.compileClasspath = configurations.testMock + sourceSets.test.compileClasspath
sourceSets.test.runtimeClasspath = configurations.testMock + sourceSets.test.runtimeClasspath

task wrapper(type: Wrapper) {
	gradleVersion = '1.12'
}

// from the Griffon ActiveJDBC plugin
def addUrlIfNotPresent( to, what ) {
    if ( !to || !what ) { return } 
    def urls = to.URLs.toList()
    switch( what.class ) { 
      case URL: what = new File( what.toURI() ); break
      case String: what = new File( what ); break
      case GString: what = new File( what.toString() ); break
      case File: break; // ok
      default:
        println "Don't know how to deal with $what as it is not an URL nor a File"
        System.exit( 1 )
    }

    if ( what.directory && !what.exists() ) { what.mkdirs() }
    def url = what.toURI().toURL()
    if ( !urls.contains( url ) && ( what.directory || !urls.find{ it.path.endsWith( what.name ) } ) ) { 
        to.addURL( url )
    }
}

// Instrument models: borowed from the Griffon ActiveJDBC plugin.
compileJava << {
	tasks.activeJdbcInstrument.execute()
}

task activeJdbcInstrument << {
    Instrumentation instrumentation = new Instrumentation()
    def projectMainClassesDir = sourceSets.main.output.classesDir.getPath()
    def rootLoader = this.class.classLoader.rootLoader
    instrumentation.outputDirectory = projectMainClassesDir
    addUrlIfNotPresent rootLoader, projectMainClassesDir
    addUrlIfNotPresent Instrumentation.class.classLoader, projectMainClassesDir
    instrumentation.instrument()
}
